(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{196:function(s,t,e){"use strict";e.r(t);var n=e(0),a=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var s=this.$createElement,t=this._self._c||s;return t("div",{staticClass:"content"},[t("h1",{attrs:{id:"dva"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dva","aria-hidden":"true"}},[this._v("#")]),this._v(" Dva")]),this._v(" "),t("p",[this._v("react项目的推荐目录结构（如果使用dva脚手架创建，则自动生成如下）")]),this._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("  |── /mock/             # 数据mock的接口文件  \n  |── /src/              # 项目源码目录（我们开发的主要工作区域）   \n  |   |── /components/   # 项目组件（用于路由组件内引用的可复用组件）   \n  |   |── /routes/       # 路由组件（页面维度） \n  |   |  |── route1.js  \n  |   |  |── route2.js   # 根据router.js中的映射，在不同的url下，挂载不同的路由组件\n  |   |  └── route3.js    \n  |   |── /models/       # 数据模型（可以理解为store，用于存储数据与方法）  \n  |   |  |── model1.js  \n  |   |  |── model2.js   # 选择分离为多个model模型，是根据业务实体进行划分\n  |   |  └── model3.js  \n  |   |── /services/     # 数据接口（处理前台页面的ajax请求，转发到后台）   \n  |   |── /utils/        # 工具函数（工具库，存储通用函数与配置参数）     \n  |   |── router.js       # 路由配置（定义路由与对应的路由组件）  \n  |   |── index.js       # 入口文件  \n  |   |── index.less      \n  |   └── index.html     \n  |── package.json       # 项目信息  \n  └── proxy.config.js    # 数据mock配置  \n")])])])])}],!1,null,null,null);t.default=a.exports}}]);