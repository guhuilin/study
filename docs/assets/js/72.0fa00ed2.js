(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{170:function(t,e,a){"use strict";a.r(e);var r=a(0),v=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"vue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue","aria-hidden":"true"}},[t._v("#")]),t._v(" VUE")]),t._v(" "),a("p",[t._v("很多人面试会问啥 vue 实现原理，但我觉得这略过分，有多少人会老老实实看过它的源码。但我觉得面者这也只是知道 vue 双向绑定的原理吧。")]),t._v(" "),a("ul",[a("li",[t._v("发布者-订阅者模式（backbone.js）")])]),t._v(" "),a("p",[t._v("一般通过 sub, pub 的方式实现数据和视图的绑定监听，更新数据方式通常做法是 vm.set(‘property’, value)，这种方式现在毕竟太 low 了，我们更希望通过 vm.property = value 这种方式更新数据，同时自动更新视图，于是有了下面两种方式")]),t._v(" "),a("ul",[a("li",[t._v("脏值检查（angular.js）\nangular.js 是通过脏值检测的方式比对数据是否有变更，来决定是否更新视图，最简单的方式就是通过 setInterval() 定时轮询检测数据变动，当然 Google 不会这么 low，angular 只有在指定的事件触发时进入脏值检测，大致如下：")])]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("DOM 事件，譬如用户输入文本，点击按钮等( ng-click )")]),t._v(" "),a("li",[t._v("XHR 响应事件 ( $http )")]),t._v(" "),a("li",[t._v("浏览器 Location 变更事件 ( $location )")]),t._v(" "),a("li",[t._v("Timer 事件( $timeout , $interval )")]),t._v(" "),a("li",[t._v("执行 $digest() 或 $apply()")])])]),t._v(" "),a("ul",[a("li",[t._v("数据劫持（vue.js）")])]),t._v(" "),a("p",[t._v("vue.js[2.0] 则是采用数据劫持结合发布者-订阅者模式的方式，通过 Object.defineProperty()来劫持各个属性的 setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。\nvue.js[3.0]采取了 proxy 的方式")]),t._v(" "),a("h1",{attrs:{id:"各种方法之间的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#各种方法之间的区别","aria-hidden":"true"}},[t._v("#")]),t._v(" 各种方法之间的区别")]),t._v(" "),a("h4",{attrs:{id:"一、methods和computed"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、methods和computed","aria-hidden":"true"}},[t._v("#")]),t._v(" 一、methods和computed")]),t._v(" "),a("ul",[a("li",[t._v("computed是计算属性，methods是方法。")]),t._v(" "),a("li",[t._v("computed计算属性是基于它们的依赖进行==缓存==的")]),t._v(" "),a("li",[t._v("computed只有在它的相关依赖发生改变时才会重新求值")]),t._v(" "),a("li",[t._v("而对于method ，只要发生重新渲染，method 调用==总会==执行该函数")]),t._v(" "),a("li",[t._v("==总之：数据量大，需要缓存的时候用computed；每次确实需要重新加载，不需要缓存时用methods==")])]),t._v(" "),a("h4",{attrs:{id:"二、computed和watch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、computed和watch","aria-hidden":"true"}},[t._v("#")]),t._v(" 二、computed和watch")]),t._v(" "),a("ul",[a("li",[t._v("计算属性是==计算属性==，==侦听器watch==是侦听器watch")]),t._v(" "),a("li",[t._v("侦听器watch是侦听一个特定的值，当该值变化时执行特定的函数")])]),t._v(" "),a("h4",{attrs:{id:"三、-router和-route"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、-router和-route","aria-hidden":"true"}},[t._v("#")]),t._v(" 三、$router和$route")]),t._v(" "),a("ul",[a("li",[t._v("router为VueRouter的实例，相当于一个全局的路由器对象，里面含有很多属性和子对象")]),t._v(" "),a("li",[t._v("route相当于当前正在跳转的路由对象。。可以从里面获取name,path,params,query等")]),t._v(" "),a("li",[t._v("打印this.$route和this.$router，==两个同时存在==。")]),t._v(" "),a("li",[t._v("两者传参方式相同")])])])}],!1,null,null,null);e.default=v.exports}}]);